@model EFS_23298_23327.ViewModel.ReservaViewModel
@using Humanizer
@using System.Globalization
@using EFS_23298_23327.Data
@{
    ViewData["Title"] = "Privacy Policy";
}

@{
    var t = Model.Tema;
    


} @{
    String d = DifficultiesValue.GetDifficultyVal((int)t.Dificuldade).ToString();
    String c = DifficultiesValue.GetDifficultyColor((int)t.Dificuldade);


     @functions {

       

        public string GetHumanReadableCount(string s, int c) {
            return s.ToQuantity(c);



        }
       



    }


    var nResSemana = Model.Sala.ListaReservas.Where(r => !r.Cancelada && ISOWeek.GetWeekOfYear(r.ReservaDate) == ISOWeek.GetWeekOfYear(DateTime.Now)).Count();

}

<style>

    .fc-timegrid-slot {
    height: 5em !important;
    // 1.5em by default border-bottom: 0 !important;
}
</style>
            
<form asp-action="Cancela" id="confirmDialog" method="post"> </form>

<div id="erroUser"></div>


@if(ViewBag.erroUserAuth != null){
     <div class="alert alert-danger alert-dismissible fade show text-center" role="alert">
       Erro!Apenas utilizadores autenticados podem fazer reservas!
       <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
}


   <div id="mod1">
</div>


@if (@TempData["ErroCliente"] != null) {
    <div class="alert alert-danger alert-dismissible fade show text-center" role="alert">
        @TempData["ErroCliente"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (@TempData["ReservaSucesso"] != null) {

    <div class="alert alert-success alert-dismissible fade show text-center" role="alert">

      @TempData["ReservaSucesso"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (@TempData["ReservaCancel"] != null) {

    <div class="alert alert-success alert-dismissible fade show text-center" role="alert">

         @Html.Raw(@TempData["ReservaCancel"])
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}




<div class="card border-secondary mb-3 " id="tema">
    <div class="card-header border border-@c border-2 h3 text-center text-@c">@t.Nome <i class=" ms-5 @t.Icone fa-1x"></i></div>
    <div class="card-body">

        <h4 class="card-title text-center"></h4>

        <div id="carouselHero" class="carousel slide card-text " data-bs-ride="carousel">
            <div class="carousel-inner">
                @foreach (var i in t.ListaFotos) {
                    @if (i.FotoId == t.ListaFotos.First().FotoId) {
                        <div class="carousel-item active" data-bs-interval="1000">
                            <img src="/Imagens/@i.Nome" class="d-block w-100 ">
                        </div>
                    } else {
                        <div class="carousel-item" data-bs-interval="2000">
                            <img src="/Imagens/@i.Nome" class="d-block w-100" alt="...">
                        </div>
                    }
                }
            </div>
            <div class="text-center card-text mt-5">
                <div class="d-flex justify-content-center">
                    <div class="row text-center">
                        <span class="bi bi-people fa-2x"> </span>
                        <span>@t.MinPessoas - @t.MaxPessoas</span>
                    </div>
                    <div class="row text-center">
                        <span class="bi bi-stopwatch fa-2x"> </span>
                        <span>@t.TempoEstimado Minutos</span>
                    </div>
                    <div class="row text-center">
                        <span class="bi bi-coin fa-2x"> </span>
                        <span>@t.Preco€/Pessoa</span>
                    </div>
                </div>

            </div>
            <div class="text-center mt-5 pt-3">
                <span class="h2 text-light">
                    @t.Dificuldade
                </span>
                <div class="progress mt-3">

                    <div class="progress-bar  progress-bar-striped bg-@c" role="progressbar" style="width:@d%;" aria-valuenow="@d" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
            </div>
            <div class="text-center mt-5">
                <span class="h4">  @t.Descricao</span>
            </div>

        </div>
    </div>
</div>
</div>
<div id="rModal"></div> 





@********************************************************@
<div class="text-center float-end me-4 text-@c">
   <i class="bi bi-fire float-end me-2 fa-fa2x"></i> <span  class="float-end me-2 " id="countText">@GetHumanReadableCount("reserva", nResSemana) esta semana</span>

</div>

<div id='calendar' class=" text-white ">


</div>

<script>



    document.addEventListener('DOMContentLoaded', function () {
        $('html, body').animate({
    @if (Model.viewStart != DateTime.MinValue && ViewBag.erroUserAuth == null) {
        @:scrollTop: $('#calendar').offset().top}, 'slow');
        //scrollToTime
    } else {
        @:scrollTop: $('#tema').offset().top}, 'slow');
    }



            var calendarEl = document.getElementById('calendar');
    var calendar = new FullCalendar.Calendar(calendarEl, {
        themeSystem: 'bootstrap5',
        timeZone: 'Europe/Lisbon',
        now: '@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss")',
        initialView: 'timeGridWeek',
        locale: 'pt',
        slotEventOverlap: false,

        initialDate: new Date(),
        stickyHeaderDates:true,

        slotMinTime: "07:00:00",
        slotMaxTime: "24:00:00",
    @{

        var tempo = (int)t.TempoEstimado + 30;
        var strTempo = TimeSpan.FromMinutes(tempo).ToString(@"hh\:mm\:ss");

        <text>slotDuration: '@strTempo', </text>
    }
        hiddenDays: [0],
        eventOverlap: false,
        
         
        selectOverlap: false,
        nowIndicator: true,
        selectable: true,
       slotLaneClassNames:function(arg) {
          
       if(arg.date>new Date()) {
           console.log("entrei")
           return ['custom_pointer'];
       }
    },
        eventColor: '#2a602a',
        selectAllow: function (info) {
            console.log(info.start >= new Date())
            return (info.start >= new Date());
        },
        editable: true,
        expandRows:true,
        eventDisplay: 'block',
        eventStartEditable: true,
        eventDurationEditable: false,
        contentHeight: 'auto',

        allDaySlot: false,
        headerToolbar: {
        left: 'prev',
        center: 'title,today',
        right: "next"


    },

        buttonText: {

        today: 'Ver dia atual',
        month: 'ver mês',
        week: 'ver semana',
        day: 'ver dia'

    },

        eventDidMount: function (info) {
            $(info.el).tooltip({
                title: info.event.extendedProps.description,
                placement: "top",
                trigger: "hover",
                container: "body"
            });
        },
       


        events: [



    @foreach (var i in Model.Sala.ListaReservas) {
        @if (i.Equals(Model.Sala.ListaReservas.Last())) {
            <text>{
                    title: 'Reserva @i.ReservaId - Sala @i.Sala.Numero',
                    start: '@i.ReservaDate.ToString("yyyy-MM-ddTHH:mm:ss")',
                    end: '@i.ReservaEndDate.AddMinutes(30).ToString("yyyy-MM-ddTHH:mm:ss")',
                     @if(i.ReservaEndDate<DateTime.Now){
                    @:display:'background',
                }
                   description:'Reserva @i.ReservaId - Sala @i.Sala.Numero - Em @TimeSpan.FromHours((i.ReservaDate - DateTime.Now).TotalHours).Humanize(2)',
                   
                   @if(@i.Cliente.UserName == User.Identity.Name){

                 <text>
                   extendedProps: {
                        nome: '@i.Cliente.PrimeiroNome @i.Cliente.UltimoNome',
                        dataI: '@i.ReservaDate.ToString("dd-MM-yyyy HH:mm:ss")',
                        idReserva: '@i.ReservaId',
                        username:'@i.Cliente.UserName',
                        dataF: '@i.ReservaEndDate.ToString("dd-MM-yyyy HH:mm:ss")',
                        temaNome: '@i.TemaNome',
                        salaId: '@i.SalaId',
                        reservaId:'@i.ReservaId',
                        diffStr: '@DifficultiesValue.GetDifficultyColor((int)i.TemaDif)',
                        sala: "@i.Sala.Numero",
                         strHoras: 'Em @TimeSpan.FromHours((@i.ReservaDate - DateTime.Now).TotalHours).Humanize(2)',
                        nPessoas: '@i.NumPessoas',
                        totalPreco: '@i.TotalPreco',
                        cancelada: '@i.Cancelada',
               

                              },
                    </text>


        }


                @if (i.Cliente.UserName.Equals(User.Identity.Name)) {
                    @:color: '#a463eb',
                }
                allDay: false
                        }</text>
        } else {
            <text>{
                    title: 'Reserva @i.ReservaId - Sala @i.Sala.Numero',
                    start: '@i.ReservaDate.ToString("yyyy-MM-ddTHH:mm:ss")',
                @if (i.ReservaEndDate < DateTime.Now) {
                    @:display:'background',
                }
                    end: '@i.ReservaEndDate.AddMinutes(30).ToString("yyyy-MM-ddTHH:mm:ss")',
                    description:'Reserva @i.ReservaId - Sala @i.Sala.Numero - Em @TimeSpan.FromHours((i.ReservaDate - DateTime.Now).TotalHours).Humanize(2)',
                    
                    
                     
                   @if(@i.Cliente.UserName == User.Identity.Name){

                 <text>
                    
                    
                    extendedProps: {
                     nome: '@i.Cliente.PrimeiroNome @i.Cliente.UltimoNome',
                      salaId: '@i.SalaId',
                        username: '@i.Cliente.UserName',
                        reservaId:'@i.ReservaId',
                    dataI: '@i.ReservaDate.ToString("dd-MM-yyyy HH:mm:ss")',
                    idReserva:'@i.ReservaId',
                    dataF: '@i.ReservaEndDate.ToString("dd-MM-yyyy HH:mm:ss")',
                    temaNome: '@i.TemaNome',
                    diffStr : '@DifficultiesValue.GetDifficultyColor((int)i.TemaDif)',
                     sala: "@i.Sala.Numero",
                    strHoras: 'Em @TimeSpan.FromHours((@i.ReservaDate - DateTime.Now).TotalHours).Humanize(2)',
                    nPessoas:'@i.NumPessoas',
                    totalPreco:'@i.TotalPreco',
                    cancelada: '@i.Cancelada'
              
                    
                  },
                   </text>

                  }



                @if (i.Cliente.UserName.Equals(User.Identity.Name)) {
                    @:color: '#a463eb',
                }
                    allDay: false
                           }, </text>

        }       }
                ],
    eventTimeFormat: { // like '14:30:00'
        hour: '2-digit',
            minute: '2-digit',

                meridiem: false,
                    hour12: false
    },

    selectAllow: function (info) {
        return (info.start >= new Date());
    },

    select: function (info) {

        @if((User.Identity?.IsAuthenticated ?? false) || true){

       @*No futuro não permitir users que são apenas admins fazerem reservas*@
    @if (User.IsInRole("Cliente")) {
        <text>


                $.post('/TemasGeral/ReservaData', { dateI: info.startStr, salaId: @Model.Sala.SalaId, viewType: info.view.type, viewStart: calendar.formatIso(info.view.activeStart), viewEnd: calendar.formatIso(info.view.activeEnd) }, function (result) {

                    if (result.failed) {
                        console.log("wdwad");
                        return false;
                    } else {
                        $('#mod1').html(result);
                        $('html, body').animate({
                            scrollTop: $('#mod1').offset().top}, 'slow');
                        $('#exampleModal').modal("show");
                    }

                });
        </text>
    } else {
        <text>
            $("#erroUser").html([
             `<div class="alert alert-danger alert-dismissible fade show text-center" id="erroUserAuth" role="alert">`,
                   ` Erro!Apenas Clientes  podem fazer reservas!`,
                   ` <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>`,
                   `</div>`
         ].join(''));
         $('html, body').animate({
         scrollTop: $('#erroUserAuth').offset().top}, 'slow');
        </text>
    }
     }else{
         
         <text>
         $("#erroUser").html([
             `<div class="alert alert-danger alert-dismissible fade show text-center" id="erroUserAuth" role="alert">`,
                   ` Erro!Apenas utilizadores autenticados podem fazer reservas!`,
                   ` <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>`,
                   `</div>`
         ].join(''));
         $('html, body').animate({
         scrollTop: $('#erroUserAuth').offset().top}, 'slow');
         
    
    </text>
    

     }


                },
    eventClick: function(info) {

        if(info.event.extendedProps.username != '@User.Identity.Name'){
            return false;
        }
        console.log(info.event.extendedProps);
        var nome = info.event.extendedProps.nome;
        var dataI = info.event.extendedProps.dataI;
        var dataF = info.event.extendedProps.dataF;
        //var salaColor = info.event.extendedProps.salaColor;
        var reservaId = info.event.extendedProps.idReserva;
        var anfs = info.event.extendedProps.nomesAnf;

        var totalPreco = info.event.extendedProps.totalPreco;
        var tema = info.event.extendedProps.temaNome;
         var salaId = info.event.extendedProps.salaId;
        var reservaId = info.event.extendedProps.reservaId;
        var nPessoas = info.event.extendedProps.nPessoas;
        var difStr = info.event.extendedProps.diffStr;
        var sala = info.event.extendedProps.sala;
        var strHoras = info.event.extendedProps.strHoras;
        console.log(info.event.extendedProps);
        var cancelada = info.event.extendedProps.cancelada;
        var nomeUser = '@TempData["userLoggedNome"]';

        var stringCanc = "";
        if (cancelada == "True") {
            stringCanc = `<i class="bi bi-x text-danger fa-5x"></i><span class='text-danger h3'>Cancelada!</span></br>`

        }
       var momentDate =moment(dataI, 'DD-MM-YYYY HH:mm:ss');
        var resDate = momentDate.toDate();
        console.log(resDate)
        var dataAtual = new Date();
        dataAtual.setDate(dataAtual.getDate() + 2);
       console.log(dataAtual)
        var strCancela = "";
       if(dataAtual<=resDate){
          var strCancela = `<button class="btn btn-danger btn-sm" data-bs-toggle="modal" data-bs-target="#modalApagar"><i class="bi bi-slash-circle fa-1x me-2"></i>Cancelar Reserva</button>`

       }else{
                    var strCancela = `<form asp-action="Cancela" method="post" enctype="multipart/form-data"><button disabled class="btn btn-danger btn-sm pe-auto" data-bs-toggle="tooltip"  data-bs-placement="top" data-bs-html='true' title="As reservas apenas podem ser canceladas até <strong>48h antes da data marcada</strong>"  type="submit" ><i class="bi bi-slash-circle fa-1x me-2"></i>Cancelar Reserva</button></form>`

       }

             
       $("#confirmDialog").html([
            
           `<div class="modal fade" id="modalApagar" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">`,
    `<div class="modal-dialog modal-dialog-centered ">`,
        `<div class="modal-content">`,
            `<div class="modal-header modal-header-danger">`,
               ` <h5 class="modal-title" id="exampleModalLabel"><i class="bi bi-exclamation-circle fa-2x me-5 "></i> Deseja cancelar a sua reserva?</h5>`,
                `<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>`,
           `</div>`,
            `<div class="modal-footer ">`,
                `<button type="button" class="btn btn-success mr-auto" data-bs-dismiss="modal">Fechar</button>`,
               
                `<input  hidden name="resId" value="${reservaId}"/>`,
                `@Html.AntiForgeryToken()`,
                    `<button type="submit" class="btn btn-danger">Cancelar Reserva</button>`,
                
            `</div>`,
        `</div>`,
    `</div>`,
`</div>`,

       ].join(""));


       
        $("#rModal").html([
            `<div class="modal text-center" id="ex" tabindex="-1">`,
            `<div class="modal-dialog text-center">`,
            `<div class="modal-content border-danger border-2">`,

            `<div class="modal-header text-center">`,

            `<h5 class="modal-title text-center">Reserva ${reservaId} - ${nome}</h5>`,
            `<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>`,
            `</div>`,
            stringCanc,
            `<div class="modal-body">`,
            `<div class="container-fluid text-center justify-content-center">`,
            `<div class="row">`,
            ` <div class="col ">`,
            `<div >`,
            `Ínicio :<span class="text-success ms-1">${dataI}</span>`,

            `</div>`,
            `<div >`,
            `Fim : <span class="text-danger ms-1">${dataF}</span>`,

            `</div>`,
            `</div> `,
            ` <div class="col">`,
            `<div class="text-info">`,
            ` Número de pessoas: ${nPessoas}`,
            `</div>`,
            `<div >`,
            `Sala: <span style="">${sala}</span>`,
            `</div>`,
            `</div> `,
            `</div>`,
            `<div class="mt-2 text-center  ">`,
            `Tema: <span class="text-${difStr}">${tema}</span>`,
            ` </div>`,
            `<div class="mt-2 text-center  ">`,
            ` Preço Total: <span class="">${totalPreco}€</span>`,
            ` </div>`,
            ` <div class="mt-5 text-center  ">`,
           strHoras,
            `</div>`,
            ` </div>`,
            ` </div>`,

            `<div class="modal-footer">`,
            strCancela,
            `<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>`,
            `</div>`,
            `</div>`,
            `</div>`,
            `</div>`].join(""));

        $("#ex").modal("show");
         var tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
    var tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
    },
    eventTimeFormat: { // like '14:30:00'
        hour: '2-digit',
            minute: '2-digit',

                meridiem: false,
                    hour12: false
    },


            });


    @if (Model.viewStart != DateTime.MinValue) {
        @:calendar.changeView('timeGridWeek', '@Model.viewStart.ToString("yyyy-MM-dd")');
    }




        calendar.render();

        });

</script>

            <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.30.1/moment.min.js"></script>